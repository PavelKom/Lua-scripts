--Fully automatic truck routing between storage and excavators
output = {}
on_nth_tick[3] = function()
	if dynamic_array == nil then
		return
	end
	if minerList == nil then
		minerList = dynamic_array(2)
		--minerList = {{nil}}
	end
	if cargoList == nil then
		cargoList = dynamic_array(2)
		--cargoList = {{nil}}
	end
	if fullMinerList == nil then
		fullMinerList = {}
	end
	if fullCargoList == nil then
		fullCargoList = {}
	end
	if emptyCargoList == nil then
		emptyCargoList = {}
	end
	var[1] = var[1] or 1 --mode
	--1 - miner scanner
	--2 - truck scanner
	--3 - remove incorrect miner vehicles
	--4 - remove incorrect truck vehicles
	--5 - filtering trucks and miners (full or not full)
	--6 - sending full trucks to the depot
	--7 - sending not full trucks to full excavators
	
	if var[1] == 1 then
		var[2] = var[2] or 1 --type (int)
		var[3] = var[3] or 1 --index (int)
		if output[advMinLog_MinerType[var[2]]] ~= var[3] then
			output = {}
			output[advMinLog_MinerType[var[2]]] = var[3]
		elseif rednet[advMinLog_MinerType[var[2]]] == nil then
			var[2] = var[2] + 1
			var[3] = 1
			if var[2] > #advMinLog_MinerType then
				output = {}
				var[2] = 1
				var[1] = 2
			end
		else
			if rednet["signal-id"] ~= nil then
				minerList[var[2]][var[3]] = rednet["signal-inventory-slot"] or 0
				var[3] = var[3] + 1
			--else
			--	var[2] = var[2] + 1
			--	var[3] = 1
			--	if var[2] > #advMinLog_MinerType then
			--		output = {}
			--		var[2] = 1
			--		var[1] = 2
			--	end
			end
		end
	elseif var[1] == 2 then
		var[2] = var[2] or 1 --type (int)
		var[3] = var[3] or 1 --index (int)
		if output[advMinLog_CargoType[var[2]]] ~= var[3] then
			output = {}
			output[advMinLog_CargoType[var[2]]] = var[3]
		elseif rednet[advMinLog_CargoType[var[2]]] == nil then
			var[2] = var[2] + 1
			var[3] = 1
			if var[2] > #advMinLog_CargoType then
				output = {}
				var[3] = nil
				var[2] = nil
				var[1] = 3
			end
		else
			if rednet["signal-id"] ~= nil then
				cargoList[var[2]][var[3]] = rednet["signal-inventory-slot"] or 0
				var[3] = var[3] + 1
			--else
			--	var[2] = var[2] + 1
			--	var[3] = 1
			--	if var[2] > #advMinLog_CargoType then
			--		output = {}
			--		var[2] = 1
			--		var[1] = 3
			--	end
			end
		end
	elseif var[1] == 3 then
		var[2] = var[2] or #advMinLog_MinerType
		if var[2] > 0 then
			var[3] = var[3] or #minerList[var[2]]
			if var[3] > 0 then
				if output[advMinLog_MinerType[var[2]]] ~= var[3] then
					output = {}
					output[advMinLog_MinerType[var[2]]] = var[3]
				elseif rednet[advMinLog_MinerType[var[2]]] == nil then
					table.remove(minerList[var[2]], var[3])
					var[3] = var[3] - 1
				else
					var[3] = var[3] - 1
				end
			else
				var[2] = var[2] - 1
				var[3] = nil
			end
		else
			var[2] = nil
			var[3] = nil
			var[1] = 4
		end
	elseif var[1] == 4 then
		var[2] = var[2] or #advMinLog_CargoType
		if var[2] > 0 then
			var[3] = var[3] or #cargoList[var[2]]
			if var[3] > 0 then
				if output[advMinLog_CargoType[var[2]]] ~= var[3] then
					output = {}
					output[advMinLog_CargoType[var[2]]] = var[3]
				elseif rednet[advMinLog_CargoType[var[2]]] == nil then
					table.remove(cargoList[var[2]], var[3])
					var[3] = var[3] - 1
				else
					var[3] = var[3] - 1
				end
			else
				var[2] = var[2] - 1
				var[3] = nil
			end
		else
			var[2] = nil
			var[3] = nil
			var[1] = 5
		end
	elseif var[1] == 5 then
		fullMinerList = {}
		emptyCargoList = {}
		fullCargoList = {}
		for i=1, #advMinLog_MinerType do
			for j=1, #minerList[i] do
				if minerList[i][j] < 10 then
					table.insert(fullMinerList, {advMinLog_MinerType[i], j})
				end
			end
		end
		for i=1, #advMinLog_CargoType do
			for j=1, #cargoList[i] do
				if cargoList[i][j] < 10 then
					table.insert(fullCargoList, {advMinLog_CargoType[i], j})
				else
					table.insert(emptyCargoList, {advMinLog_CargoType[i], j})
				end
			end
		end
		var[1] = 6
	elseif var[1] == 6 then
		var[2] = var[2] or #fullCargoList
		if var[2] > 0 then
			--game.output(fullCargoList[var[2]][1].."  "..fullCargoList[var[2]][2])
			if output[fullCargoList[var[2]][1]] ~= fullCargoList[var[2]][2] then
				output = {}
				output[fullCargoList[var[2]][1]] = fullCargoList[var[2]][2]
				output["signal-x-tile"] = depot_X
				output["signal-y-tile"] = depot_Y
				output["signal-K"] = 1
			else
				output = {}
				var[2] = var[2] - 1
			end
		else
			var[2] = nil
			var[1] = 7
		end
	elseif var[1] == 7 then
		var[2] = var[2] or math.min(#emptyCargoList, #fullMinerList)
		if var[2] > 0 then
			if var[3] == nil then
				if output[fullMinerList[var[2]][1]] ~= fullMinerList[var[2]][2] then
					output = {}
					output[fullMinerList[var[2]][1]] = fullMinerList[var[2]][2]
				else
					var[3] = {rednet["signal-x-tile"], rednet["signal-y-tile"]}
					output = {}
				end
			else
				if output[emptyCargoList[var[2]][1]] ~= emptyCargoList[var[2]][2] then
					output = {}
					output[emptyCargoList[var[2]][1]] = emptyCargoList[var[2]][2]
					output["signal-x-tile"] = var[3][1]
					output["signal-y-tile"] = var[3][2]
					output["signal-K"] = 1
				else
					output = {}
					var[3] = nil
					var[2] = var[2] - 1
				end
			end
		else
			var[1] = 1
			var[2] = nil
			var[3] = nil
		end
	else
		var[1] = 1
	end
	--output["signal-0"] = #minerList or 0
	output["signal-1"] = #minerList[1] or 0
	output["signal-2"] = #minerList[2] or 0
	output["signal-3"] = #minerList[3] or 0
	output["signal-4"] = #minerList[4] or 0
	output["signal-5"] = #minerList[5] or 0
	
	output["signal-6"] = #cargoList[1] or 0
	output["signal-7"] = #cargoList[2] or 0
	
	output["signal-A"] = var[1] or 0
	
	output["signal-D"] = #fullMinerList or 0
	output["signal-E"] = #emptyCargoList or 0
	output["signal-F"] = #fullCargoList or 0
	
end

on_console_chat = function(event)
	if event.message == "clear minerdata" then
		minerList = nil
		cargoList = nil
		var[1] = nil
		var[2] = nil
		var[3] = nil
		fullMinerList = {}
		emptyCargoList = {}
		fullCargoList = {}
	end
end